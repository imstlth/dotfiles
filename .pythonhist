numpy.linalg.det([[2, 4, 6], [2, 0, 2], [6, 8, 14]])
2 ** 254
2 ** 508
help(tuple)
vus = {}
() in vus
a = None
a
a == None
a is not None
a = "n1"
a[1:]
int(a[1:])
liste = "abc"
liste[2:]
["j"][:0]
L = ["j"]
L = [1, 3, 100]
L.pop(1)
L
L.pop()
L
L.insert(1, 0)
L
L.insert(10, 0)
L
L = []
L = ["a", "b", "c", "d"]
L.insert(3, L.pop(1))
L
def insertion(liste, pos, elem):
a = [1, 2]
a[:] = [2, 3]
a
L
L[:2]
L
L[:1] + L[2:3] + [L[1]] + L[3:]
L = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
i = 1
n = 0
end = 4
            L[:] = L[:i-n] + L[i-n+1:end+1] + [L[i-n+1]] + L[end+1:]
            L[:] = L[:i-n] + L[i-n+1:end+1] + [L[i-n+1]] + L[end+1:]
L[:] = L[:i-n] + L[i-n+1:end+1] + [L[i-n+1]] + L[end+1:]
L
L = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
L[:i-n]
L[i-n+1:end+1]
[L[i-n+1]]
def truc(x):
    for i in range(5):
        x+=1
    return x
a = 4
truc(a)
a
list(range(0))
L = [1, 2, 0]
[ L[x] for x in L]
L = [5, 5, 2, 2, 0, 2, 2]
[ L[x] for x in L ]
L_ex
L_ex = [1, 3, 5, 7, 9, 1, 3, 5, 7, 9]
[ L_ex[x] for x in L_ex ]
L_test = [9, 1, 3, 8, 2, 4, 5, 9, 1, 1]
L = L_test
L
[ L[x] for x in L ]
for i in range(5):
    a = ""
    
print(i)
import itertools
list(itertools.combinations([1, 2, 10, 100, 20], 3))
(255 - 60)/2
(255 - 90)/2
82.5/255
97.5/255
itertools.combinations(range(4), 2)
import itertools
itertools.combinations(range(4), 2)
list(itertools.combinations(range(4), 2))
graphe = {0: [1, 2], 1: [0], 2: [0, 1]}
agents = [0, 1]
liste_choix = []
for agent in agents:
    if liste_choix == []:
        liste_choix.append(graphe[agent])
    else:
        liste_choix = [ [x] for x in graphe[agent] ]
    else:
        for choix in liste_choix:
        for i in range(len(liste)):
        for i in range(len(liste_choix)):
            for choix_ag in graphe[agent]:
            liste_autres = liste_choix.pop(0)
            for choix_ag in graphe[agent]:
                liste_choix.append(liste_autres + [choix_ag])
print(liste_choix)
def truc(L):
    L[0] += 1
    truc(L[1:])
    
a = [1, 2, 3]
truc(a)
def truc(L):
    if L != []:
        L[0] += 1
        truc(L[1:])
    
truc(a)
a
a = [1, 2, 3]
truc(a)
a
import itertools
itertools.combinations(range(256), 60)
n = 0
for i in itertools.combinations(range(256), 60):
    if n == 3:
        break
    print(i)
    n += 1
    
(-10) % 30
a = "1001\n"
a
a[:-1]
list({})
list({"a", "b", "c"})
a = {"a", "b", "c"}
from PIL import Image
import requests
url = "https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg/960px-Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg"
reponse = requests.get(url, stream=True)
img = Image.open(reponse.raw)
img.getcolors()
a = img.getdata()
a[0]
a[:10]
a
a = list(a)
a[:10]
largeur = 100
100 % 100
100 // 100
99 // 100
a = a[:10]
a
for i in range(len(a)):
import numpy as np
np.full((1, 3), 0)
import numpy as np
x = np.arange(100).reshape((10, 10))
x
x[0:3, 0:3]
i = 2
j = 1
x[i:i+3, j:j+3]
x[3*i:3*i+3, 3*j:3*j+3]
coords = (3*i:3*i+3, 3*j:3*j+3)
x[3*i:3*i+3, 3*j:3*j+3]
a = x[3*i:3*i+3, 3*j:3*j+3]
a.flatten()
def encoder_img(img_src, img_x, img_y, blocs_x, blocs_y):
    if img_x % blocs_x != 0 or img_y % blocs_y != 0:
        # Peut-être que l'on peut améliorer ça
        raise Exception("Les blocs ne divisent pas l'image !")
    n_blocs_x = img_x // blocs_x
    n_blocs_y = img_y // blocs_y
    # Chaque ligne de blocs est un bloc
    blocs = np.full((n_blocs_x * n_blocs_y, blocs_x * blocs_y), F256(0), dtype=F256)
    for y in range(n_blocs_y):
        for x in range(n_blocs_x):
            bloc = img_src[n_blocs_y*y:n_blocs_y*(y+1), n_blocs_x*x:n_blocs_x*(x+1)]
            blocs[0] = bloc.flatten()
    return blocs
import fichier
import numpy as np
import fichier
x = np.arange(100).reshape((10, 10))
x
x = np.arange(81).reshape((9, 9))
x
fichier.encoder_img(x, 9, 9, 3, 3)
import numpy as np
import fichier
x = np.arange(81).reshape((9, 9))
fichier.encoder_img(x, 9, 9, 3, 3)
import numpy as np
import fichier
x = np.arange(81).reshape((9, 9))
fichier.encoder_img(x, 9, 9, 3, 3)
x
np.array((1, 3))
np.empty((1, 3))
np.array([1, 3]).shape
np.full((1, 3), 0)
np.full((2, 3), 0)
np.full((2, 3), 0).shape()
np.full((2, 3), 0).shape
truc = np.full((2, 3), 0)
truc[1, 2] = 3
truc
truc.flatten().reshape((2, 3))
np.full((2, 4, 3), 0)
492/6
from PIL import Image
import requests
mona_lisa = "https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg/330px-Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg"
reponse = requests.get(mona_lisa, stream=True)
img = Image.open(reponse.raw)
330 * 3 / 18
15 * 12
2 ** 8 - 1
import numpy as np
np.multiply(2, [0, 1, 2, 3])
492 / 24
492 / 18
492 / 4
123 / 11
123 / 6
123 / 3
41 * 3 * 4
2 * 3 * 41
6 * 12
a = {(10, 3, 9, 100, 73, 181): 0}
a
a[(10, 3, 9, 100, 73, 181)]
( i for i in range(10) )
a = ( i for i in range(10) )
a
tuple(a)
330 * 492 / 72
2255 / 25
2255 / 5
451 / 11
330 * 492 / 72
2255 / 5
414 * 295 / (2 * 3 * 5)
4071 / 3
4071 / 9
4071 / 3
1357 / 11
1357 / 13
1357 / 17
1357 / 7
200 * 200 / (5 * 5 * 3)
200 * 200 / (5 * 5)
150 * 150 / 25
150 * 150 * 3
150 * 150 * 3 / 75
3 * 6 * 15
3 * 10 * 6
150 * 150 / 10 * 6
13500 / 12
150 * 150 / 10 * 6
13500 / 9
150 * 150 / 10 * 6 * 3
150 * 10
150 / 18
150 / 6
25 * 15
150 / 6
150 / 10
25 * 15
150 * 150 / 10 * 6
150 * 150 / (10 * 6)
375 / 5
3 * 5 * 5 * 5
135 / 5
15 * 12
15 * 14
15 * 15
15 * 16
180 / 14
180 / 16
180 / 12
135 * 180 / (5 * 12)
405 / 5
187 / 7
187 / 11
15 * 17
187 * 150 / (5 * 11)
510 / 12
196 / 12
196 / 16
196 / 13
196 / 14
15 * 14
125 * 196 / (5 * 14)
import main
import itertools
from multiprocessing import Process
import numpy as np
import time
import random
from PIL import Image
from urllib.request import urlopen
# Avec numpy, le produit matriciel s'écrit A @ B
# la transposée A.T et le modulo np.mod(mat, modulo).
# On suit plutôt le livre de Rousseau & Saint-Aubin.
# On se place dans le cadre des codes linéaires pour l'instant
# mais pas forcément systématiques.
# Code de Hamming C(7, 4) = C(2^3 - 1, 2^3 - 3 - 1)
# G est de dim (2^k - k - 1)×(2^k - 1)
# i.e. entrée × sortie
# On multiplie donc par la gauche en ligne pour encoder.
G3 = np.array([[1, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 1],
               [0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 1, 1, 1, 1]])
# H est de dim k×(2^k - 1)
# i.e. k × sortie
# On multiplie donc par la droite en colonne pour avoir le syndrome.
H3 = np.array([[1, 1, 0, 1, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0],
               [0, 1, 1, 1, 0, 0, 1]])
# Le code de Hamming C(7, 4) est prévu de telle façon à ce que
# quelque soit le mot erroné e, H × e^T est une colonne de H
# car H comporte l'ensemble des vecteurs non nuls de l'ensemble d'arrivée.
def encoder(G, m):
    return np.mod(m @ G, 2)  # merci numpy
# On ne peut donc corriger qu'au max 1 erreur
# On a besoin de G et de H pour décoder
# car on ne sait pas encore calculer le "complément orthogonal".
# Une fois qu'on aura fait le chapitre sur les espaces préhilbertiens réels
# on sera _a priori_ en mesure de générer automatiquement des matrices G et H quelque soit k.
# En effet, la matrice H correspond à l'ensemble des vecteurs non nuls de l'espace d'arrivé
# et H est le "complément orthogonal" de G (donc peut-être que G est le c.o. de H).
# (Ça serait assez pratique)
def decoder(G, H, w):
    """G la matrice génératrice (2^k - k - 1)×(2^k - 1),
    H la matrice de contrôle k×(2^k - 1),
    w le mot reçu 1×(2^k - 1)"""
    syndrome = np.mod(H @ w.T, 2)  # k×1
    k = syndrome.shape[0]
    # S'il y a eu une erreur, on la corrige.
    if not (syndrome == np.zeros([k, 1])).all():
        n = 0
        # On itère sur les colonnes (!) de H.
        for col in np.hsplit(H, H.shape[1]):
            if (syndrome == col).all():
                break
            n += 1
        w[0, n] += 1
        w = np.mod(w, 2)
    # À ce moment, w devrait être un mot de code.
    for mot in itertools.product([0, 1], repeat=(2**k - k - 1)):
        np_mot = np.array([mot])
        mot_de_code = np.mod(np_mot @ G, 2)
        if (mot_de_code == w).all():
            return np_mot
    # Si on arrive là, c'est qu'il y a eu une erreur.
    return False
"""
m = np.array([[1, 1, 0, 1]])
print("mot réel   :", m)
w = encoder(G3, m)
print("mot encodé :", w)
print("---")
print()
print("Quelque soit la position de la perturbation, le mot est corrigé correctement :")
print()
for i in range(8):
    if i != 0:
        w[0,i-1] += 1
        w = np.mod(w, 2)
    print("mot erroné :", w)
    d = decoder(G3, H3, w)
    print("mot décodé :", d)
    print()
print()
print("Dès qu'il y a 2 perturbations, le mot est mal corrigé :")
w = encoder(G3, m)
w[0,0] += 1
w[0,1] += 1
w = np.mod(w, 2)
print("mot erroné :", w)
d = decoder(G3, H3, w)
print("mot décodé :", d)"""
#########################
# F256 = F2[X]/(P) avec P un polynôme de F2[X] irréductible de degré 8
# (P) = P F2[X]
# En l'occurence, grâce à des gens intelligents sur Internet,
# X^8 + X^7 + X^2 + X + 1
# est irréductible sur F2[X].
# Il a aussi une propriété ultra cool : notre F256* est alors engendré par X -> X est un élément primitif !
# On représente les polynômes de F2[X] par des nombres binaires.
# On s'aide en particulier de https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders
# PYTHON : un nombre binaire s'écrit sous la forme 0b00000000 (avec autant de 0 que l'on veut)
# mais c'est totalement équivalent de l'écrire en décimal.
# À partir de maintenant, on identifie un polynôme à son écriture binaire.
# Par exemple
"""a = 0b00000101
print(a == 5)"""
# renvoie True
# On voit alors que les polynômes sont "ordonnés" parce que les nombres binaires sont ordonnés
# Par exemple, pour un polynome P, si P >= 0b100000000 = 2**8
# cela veut dire que son degré est supérieur ou égal à 8
# Python permet d'effecteur des opérations bit par bit
# & = AND
# | = OR
# ^ = XOR = + dans F2 (très important)
# ~ = NOT
# X^8 + X^7 + X^2 + X + 1
P = 0b110000111
def to_poly(bin_int):
    "Renvoie un polynôme à partir de sa représentation binaire."
    # Il faut faire un cas à part pour 0
    if bin_int == 0:
        return "0"
    poly = ""
    p = len(bin(bin_int)) - 3
    for coeff in bin(bin_int)[2:]:
        if p == 0:
            poly += "1 + " * int(coeff)
        else:
            poly += f"X^{p} + " * int(coeff)
        p -= 1
    return poly[:-3]
print("P =", to_poly(P))
# Il y a beaucoup de commentaires mais le code tient en 10 lignes
def div_P(poly):
    "Calcule le reste de la div de poly (en binaire) par P"
    if poly < 2**8:
        return poly
    # On effectue d'abord la div par X^8
    quotient = poly >> 8  # Ça équivaut à se donner le quotient par X^8
    reste = poly - (quotient * 2**8)
    # Pour chaque puissance 8+n :
    # X^8 X^n = (P - X^8) X^n (math)
    # Ce qui revient à augmenter les puissances de P-X^8 de n (math)
    # puis à l'ajouter au reste du polynôme.
    # Puisque en python, + = - = ^,
    # on "shift" P ^ 2**8 (py, ^ vu comme -) par n
    # puis on ajoute (^) ça au reste
    n = 0
    for coeff in bin(quotient)[:1:-1]:
        # Si coeff = 1, tout ce passe bien, si = 0, ^0 ne fait rien
        reste ^= ((P ^ 2**8) << n) * int(coeff)
        n += 1
    # Comme rien n'empêche que les n soient très grands
    # et donc que le reste ait toujours un degré ≥ 8.
    return div_P(reste)
# depart = time.time()
# for i in range(100000):
# arrivee = time.time()
# print(arrivee - depart)
# print("X^11 =", to_poly(div_P(2**11)))
# print("X^10 =", to_poly(div_P(2**10)))
class F256:
    # Attention ! F256 prend en entrée un polynôme et non pas une puissance de X
    def __init__(self, polynome):
        self.poly = div_P(polynome)
    
    def __add__(self, other):
        return F256(self.poly ^ other.poly)
    
    # Nous sommes en caractéristique 2 donc
    def __sub__(self, other):
        return F256(self.poly ^ other.poly)
    
    def __neg__(self):
        return self
    
    def __int__(self):
        return self.poly
    
    def __str__(self):
        # Finalement, on affiche juste le polynôme et non pas la puissance de X
        return str(self.poly)
        # if self.poly == 0:
        #     return "0"
        # return str(table_exp[self.poly] + 1)
        # ATTENTION ! Ce n'est qu'une représentation. Dans cette représentation, 2 * 2 = 3.
        # On fait + 1 pour représenter 0 sous la forme 0 et 1 sous la forme 1 ALORS QUE 1 = X^0 et devrait donc être aussi représenté sous 0
    
    def __repr__(self):
        return str(self.poly)
    
    def __eq__(self, other):
        return self.poly == other.poly
# D'un POV purement Python, on a besoin d'avoir défini F256 avant de definir create_table
# Mais pour définir la méthode __mul__ de F256, on a besoin de create_table.
# Il y a une solution : https://stackoverflow.com/questions/17929543/how-can-i-dynamically-create-class-methods-for-a-class-in-python
def create_tables():
    table_exp = {}
    table_log = {}
    for puissance in range(2**8 - 1):
        # 2 représente X ici
        table_exp[F256(2**puissance).poly] = puissance
        table_log[puissance] = F256(2**puissance)
    return table_exp, table_log
# La table des puissances
table_exp, table_log = create_tables()
def mulF256(self, other):
    try:
        # nouvelle multiplication -> on additionne les puissances de X
        # Il faut faire ce test avant car 0 n'est pas une puissance de X
        if 0 in [self.poly, other.poly]:
            return F256(0)
        return table_log[(table_exp[self.poly] + table_exp[other.poly]) % 255]
        # return F256(2**((table_exp[self.poly] + table_exp[other.poly]) % 255))  # car X^255 = 1
        # ancienne multiplication -> on faisant la multiplication polynômiale
    #        n = 0
    #        new_poly = 0
    #        for valeur in bin(other.poly)[:1:-1]:
    #            new_poly ^= (self.poly << n) * int(valeur)
    #            n += 1
    #        return F256(new_poly)
    except:
        raise Exception("Il faut multiplier par un autre nombre de F256 !")
def powF256(self, scalaire):
    if scalaire == 0:
        return F256(1)
    elif self.poly == 0:
        return self
    else:
        return table_log[(table_exp[self.poly] * scalaire) % 255]
def truedivF256(self, other):
    if other.poly == 0:
        raise ZeroDivisionError()
    elif self.poly == 0:
        return self
    else:
        puis_self = table_exp[self.poly]
        puis_other = table_exp[other.poly]
        return table_log[(puis_self - puis_other) % 255]
setattr(F256, "__mul__", mulF256)
setattr(F256, "__pow__", powF256)
setattr(F256, "__truediv__", truedivF256)
depart = time.time()
for i in range(1000):
    a = table_log[200] * table_log[100]
arrivee = time.time()
# print(arrivee - depart)
# 2 = X
zero = F256(0)
un = F256(1)
X = F256(2**1)
X2 = F256(2**2)
X3 = F256(2**3)
# print(zero)
# print(un)
# print(X)
# print(X2)
# print(X3)
# print("2 - 1 =", X - un)
# print("1 + 1 =", un + un)
# print("1 * 1 =", un * un)
# print("2 * 2 =",
#       X * X)  # 2 * 2 = 3 c'est normal c'est juste une représentation
# print("3 + 4 =", X2 + X3)
# print("3 / 2 =", X3 / X2)
# print()
############################
#----------
#implémentation de la page 22 du poly du premier mail codes correcteurs
def affiche_poly(u):
    p = ""
    for i in range(u.shape[0]):
        coeff = u[i]
        if coeff != F256(0):
            if p != "":
                p += " + "
            if i == 0:
                p += f"{coeff}"
            else:
                p += f"{coeff} X^{i}"
    print(p)
# X est une racine primitive. X = X^1 = 0b10 = 2
def encodage_v1(u):
    k = u.shape[0]
    a = np.zeros(255, dtype=F256)
    for i in range(255):
        c = F256(0)
        for j in range(k):
            c += u[j] * table_log[(i * j) % 255]
        a[i] = c
    return a
def encodage_v2(u):
    pass
# On teste que numpy sait faire des produits matriciels même dans F256
matA = np.array([[F256(1), F256(2)], [F256(3), F256(4)]])
matB = np.array([[F256(5), F256(6)], [F256(7), F256(8)]])
def id(n):
    mat = np.full((n, n), F256(0), dtype=F256)
    for i in range(n):
        mat[i, i] = F256(1)
    return mat
test = np.full((2, 2), F256(0), dtype=F256)
# print(type(test[1, 0]))
I2 = np.array([[F256(1), F256(1)], [F256(1), F256(1)]])
# print(type((matA @ matB)[0, 0]))
# print(matA @ id(2))  # Yahoo
# On a améliorer grandement la complexité de cette fonction
# parce qu'elle prenait beaucoup trop de temps pour des matrices de grande taille
def algo_du_pivot(mat):
    cop = mat.copy()
    n = cop.shape[0]
    n_pivots_prec = 0
    inv = id(n)
    if n != cop.shape[1]:
        raise Exception("Elle est pas carrée !")
    for col in range(n):
        pivot = None
        # À chaque fois qu'on fait un pivot, on regarde plus que les lignes en dessous
        for ligne in range(n_pivots_prec, n):
            pivot = cop[ligne, col]
            if pivot != F256(0):
                # On passe à la suite
                break
        if pivot is None:
            # Dans ce cas, la coprice n'est pas inversible
            return False
        
        # On échange les lignes "ligne" et "n_pivots_prec"
        # Il faut mettre des doubles crochets bien échanger les lignes
        cop[[ligne]], cop[[n_pivots_prec]] = cop[[n_pivots_prec]], cop[[ligne]]
        inv[[ligne]], inv[[n_pivots_prec]] = inv[[n_pivots_prec]], inv[[ligne]]
        # Opération Li <- Li - coeff/pivot Lj
        #  et Lj <- coeff/pivot Lj
        for i in range(n):
            if cop[i, col] != F256(0):
                if i == n_pivots_prec:
                    cop[i] /= pivot
                    inv[i] /= pivot
                    pivot = F256(1)
                else:
                    coeff = cop[i, col] / pivot
                    cop[i] -= np.multiply(coeff, cop[n_pivots_prec])
                    inv[i] -= np.multiply(coeff, inv[n_pivots_prec])
        n_pivots_prec += 1
    return inv
from numpy.polynomial import Polynomial
p = Polynomial([F256(1), F256(3), F256(10)])
p
p + Polynomial([F256(1)])
b = Polynomial([F256(1)])
p + b
a = [1, 2, 3]
a[:2:-1]
a[:1:-1]
list(range(10, 0, -1))
list(range(2, 0, -1))
a = [0] * 10
a[0] = 1
a
list(range(2, 0, -1))
import numpy as np
np.full((2, 1), 0)
np.array(range(3))
np.array(range(3)).transpose()
np.array(range(3)).reshape((3, 1))
a = [0, 1, 2, 3]
a[0:2]
list(np.array(range(3)))
np.array(range(3)).tolist()
import PIL
from PIL import Image
truc = open("/home/caracole/Pictures/shrek.jpg")
img = Image.open(truc)
img = Image.open(truc.read())
truc.readable()
truc.read(1)
truc.read(10)
truc.read(100)
truc.read()
truc.close()
img = Image.open("/home/caracole/Pictures/shrek.jpg")
img.getcolors()
img.getpixel(0, 0)
img.getpixel((0, 0))
img.getcolors(maxcolors = 256)
img = img.convert("RGB")
img.getcolors()
img.show()
img.show()
img.convert("RGB").getcolors()
exit()
from PIL import Image
Image.open("Pictures/404 wtf.jpg").convert("RGB").getcolors()
Image.open("Pictures/404 wtf.jpg").convert("RGB").show()
from PIL import Image
a = Image.open("Pictures/shrek.jpg")
a = a.convert("RGB")
l = a.getcolors(a.size[0] * a.size[1])
l[0]
l[:100]
max_occ = 0
max_color = None
for color in l:
    if color[0] > max_occ:
        max_color = color[1]
        
    
print(max_color)
print(max_occ)
for color in l:
    if color[0] > max_occ:
        max_color = color[1]
        max_occ = color[0]
        
    
print(max_occ)
print(max_color)
img.show()
a.show()
hex(54)
hex(255)
hex(255)[2:]
def truc(fn, args):
def truc(fn, args):
    return fn(args)
def machin(hello):
    return 2 * hello
truc(machin, 2)
truc(machin, [0])
def test(oui, non):
    return oui || non
def test(oui, non):
    return oui or non
truc(test, (True, False))
def truc(fonction, args):
    return fonction(*args)
truc(test, (True, False))
truc(machin, [0])
truc(machin, 3))
truc(machin, 3)
len([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 254, 254, 254, 254, 254, 192, 192, 192, 116, 116, 116, 118, 118, 118, 255, 255, 255, 248, 248, 248, 160, 160, 160, 62, 62, 62, 54, 54, 54, 254, 254, 254, 252, 252, 252, 157, 157, 157, 55, 55, 55, 50, 50, 50, 252, 252, 252, 254, 254, 254, 151, 151, 151, 53, 53, 53, 50, 50, 50, 255, 255, 255, 255, 255, 255, 147, 147, 147, 54, 54, 54, 49, 49, 49, 252, 252, 252, 252, 252, 252, 141, 141, 141, 58, 58, 58, 53, 53, 53, 255, 255, 255, 254, 254, 254, 135, 135, 135, 54, 54, 54, 47, 47, 47]
)
len([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212, 144, 37, 99, 187, 63, 220, 217, 190, 207, 251, 162, 92, 160, 92, 106, 70, 245, 208, 52, 102, 115, 203, 82, 66, 117, 22, 148, 200, 212, 77, 20, 111, 17, 4, 125, 200, 68, 62, 76, 97, 219, 18, 96, 73, 250, 178, 119, 216, 126, 17, 252, 105, 26, 128, 94, 190, 176, 9])
len([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212, 144, 37, 99, 187, 63, 220, 217, 190, 207, 251, 162, 92, 160, 92, 106, 70, 245, 208, 52, 102, 115, 203, 82, 66, 117, 22, 148, 200, 212, 77, 20, 111, 17, 4, 125, 200, 68, 62, 76, 97, 219, 18, 96, 73, 250, 178, 119, 216, 126, 17, 252, 105, 26, 128, 94, 190, 176, 9])
import numpy as np
test = np.full((2, 2), 0)
test
test.tolist()
clear
474 / 2
237 / 3
316 / 4
320 / 8
320 / 16
320 / 32
320 / 64
16 * 16 * 3
8 * 4 * 3
import time
time.timezone
import datetime
datetime.date(2025, 1, 1)
datetime.datetime(2025, 1, 1, 0, 0, 0)
import datetime
import datetime as dt
a = dt.datetime(2025, 1, 1, 0, 0, 0)
b = dt.datetime()
dt.time()
dt.time() - a
dt.datetime_CAPI
dt.datetime_CAPI(à
)
dt.datetime_CAPI()
dt.tzinfo
dt.tzinfo.fromutc
dt.tzinfo.fromutc()
dt.now()
dt.datetime.now()
(dt.datetime.now() - a).total_seconds()
(dt.datetime.now() - a).days
(dt.datetime.now() - a).month
(dt.datetime.now() - a).months
b = (dt.datetime.now() - a)
b.days
(dt.datetime.now() - a) / 52
1660 / 60
import time
time.time()
a = open("/home/caracole/.last")
b = int(a.read())
b
a = open("/home/caracole/.count")
t = a.read()
t
t[:-1]
a.close()
b = open("/home/caracole/.count", "w")
b.write("52")
b.close()
a = open("/home/caracole/.count")
a.read()
import time
import datetime as dt
dt.datetime.now() - time.time()
dt.datetime.fromtimestamp(time.time())
int("1\n")
dt.datetime(2025, 1, 1, 0, 0, 0) < dt.datetime.now()
dt.datetime.now() + dt.datetime(0, 0, 0, 1)
dt.datetime.now() + dt.timedelta(0, 0, 0, 0, 0, 1)
import os
os.system("notify-send -a 'ouais' -w 'yo' 'salut'")
os.system("notify-send -a 'ouais' -w 'yo' 'salut'")
a = (dt.datetime.now() + dt.timedelta(0, 0, 0, 0, 0, 1))
a.hour
a.day
a
int("1.1\n")
"1x\n".strip()
import datetime as dt
dt.datetime.now()
n = dt.datetime.now()
n.ctime()
n.strftime()
n.strftime("%a %d %b %Y à %H:%M")
a = open("/home/caracole/.counter")
a.close()
a = open("/home/caracole/.counter", "w")
a.write(repr([52, 1749246456
]))
a.close()
a = open("/home/caracole/.counter", "w")
a.write(repr([52, 1749246456]))
a.close()
a = open("/home/caracole/.counter")
data = a.read()
data
eval(data)
a, b, c = [0, 1, 2]
a
b
c
clear
import datetime as dt
n = dt.datetime.now()
n.hour
n = dt.datetime.now() - dt.timedelta(0, 0, 0, 0, 0, 3)
n.hour
import time
time.time()
3 * 8 * 4
3 * 8 * 4
255 - 96
3 * 8 * 8
255 - 192
3 * 16 * 16
3 * 8 * 8
3 * 8 * 8
192 + 2 * 31
3 * 8 * 8*
3 * 8 * 8
3 * 8 * 8 + 20
3 * 8 * 8
20 * 12 * 3
import main
import main
a = main.F256(0b11)
b = main.F256(0b100)
a
b
a * b
main.table_exp[3]
main.table_exp[4]
main.table_log[101]
a = main.F256(0b10)
a * b
a
b 
import main
a = main.F256(0b111)
b = main.F256(0b101)
a
b
a * b
b = main.F256(0b11)
b
a * b
main.table_exp[7]
main.table_exp[3]
b = main.F256(0b10)
b
main.table_exp
main.table_log
0b1010
a = main.F256(0b1010)
b = main.F256(0b1000)
a
b
a * b
b = main.F256(0b111)
b
a * b
main.table_log[10]
main.table_log[7]
149 + 128
277 % 255
main.table_exp[22]
main.table_log[22]
main.exp
main.table_exp
for i in main.table_exp:
    if i <= 10:
        print(i, main.table_exp[i])
        
    
0b101
0b1010
0b111
a = main.F256(0b101)
b = main.F256(0b111)
a * b
198 + 106
304 % 255
main.table_log[49]
a = main.F256(0b1100000)
a
b = main.F256(0b110)
b
a * b
b = main.F256(0b10)
b
a * b
a = main.F256(0b1110000)
a 
a * b
a = main.F256(0b1001000)
a
a 
a * b
b = main.F256(0b11)
b
a * b
b = main.F256(0b111)
a * b
b
b = main.F256(0b11)
b = main.F256(0b111)
a = main.F256(0b100100)
a
a * b
b
36 * 7
a = main.F256(0b110100)
a
a = main.F256(0b110000)
a
48 * 7
a = main.F256(0b110000)
b = main.F256(0b111)
a
b
a * b
b = main.F256(0b100)
b
a * b
b = main.F256(0b1000)
b
a * b
a = main.F256(0b100000)
a
a * b
a = main.F256(0b110000)
a = main.F256(0b100000)
b = main.F256(0b1001)
a * b
b
a 
main.table_exp[9]
main.table_exp
for i in range(16):
    print(i, main.table_exp[i])
    
for i in range(1, 16):
    print(i, main.table_exp[i])
    
main.table_exp[0b100001]
a 
0b100001
a = main.F256(0b100001)
a
b = main.F256(0b1001)
b
a * b
main.table_exp[33]
main.table_exp[9]
87 + 205
292 % 255
main.table_log[37]
3 * 8 * 8
7497105550516842596726617568141903372594654293104986611358148366984030285
3 * 5 * 6
5 * 5 * 3
3 * 4 * 4
3 * 4 * 10
3 * 4 * 12
3 * 4 * 16
256 - 192
3 * 5 * 6
180 / 12
15 * 12
256 - 180
180 / 8
256 - 3 * 5 * 10
